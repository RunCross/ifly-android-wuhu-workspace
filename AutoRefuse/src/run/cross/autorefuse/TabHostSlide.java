package run.cross.autorefuse;

import android.content.Context;
import android.util.AttributeSet;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;

public class TabHostSlide extends android.widget.TabHost {

	private Animation slideLeftIn;// 从屏幕左边进来 
	private Animation slideLeftOut;// 从屏幕左边出去 
	private Animation slideRightIn;// 从屏幕右边进来 
	private Animation slideRightOut;// 从屏幕右边出去
	
//	private Animation slideLeftIn = AnimationUtils.loadAnimation(context, 
//			R.anim.push_left_in); 
//	private Animation slideLeftOut = AnimationUtils.loadAnimation(context, 
//	        R.anim.push_left_out); 
//	private Animation slideRightIn = AnimationUtils.loadAnimation(context, 
//			R.anim.push_right_in); 
//	private Animation slideRightOut = AnimationUtils.loadAnimation(context, 
//			R.anim.push_right_out); 
	
	
	/** 记录是否打开动画效果 */
	private boolean isOpenAnimation ; 
	/** 记录当前标签页的总数 */
	private int mTabCount;
	
	public TabHostSlide(Context context) {
		super(context);
		// TODO Auto-generated constructor stub
		
		slideLeftIn = AnimationUtils.loadAnimation(context, 
				R.anim.push_left_in); 
		slideLeftOut = AnimationUtils.loadAnimation(context, 
				R.anim.push_left_out); 
		slideRightIn = AnimationUtils.loadAnimation(context, 
				R.anim.push_right_in); 
		slideRightOut = AnimationUtils.loadAnimation(context, 
				R.anim.push_right_out); 
		isOpenAnimation = true;
	}
	
	public TabHostSlide(Context context,AttributeSet attrs) {
		super(context,attrs);
		// TODO Auto-generated constructor stub
		
		slideLeftIn = AnimationUtils.loadAnimation(context, 
				R.anim.push_left_in); 
		slideLeftOut = AnimationUtils.loadAnimation(context, 
				R.anim.push_left_out); 
		slideRightIn = AnimationUtils.loadAnimation(context, 
				R.anim.push_right_in); 
		slideRightOut = AnimationUtils.loadAnimation(context, 
				R.anim.push_right_out); 
		isOpenAnimation = true;
	}
	
	/**
	 * 开启动画
	 * @param isOpenAnimation
	 */
	public void setOpenAnimation(boolean isOpenAnimation) { 
		this.isOpenAnimation = isOpenAnimation; 
		} 
	
	/**
	 * 总页数
	 * @return
	 */
	public int getTabCount() { 
		return mTabCount; 
	} 
	
	/**
	 * 添加tab页面
	 */
	@Override
	public void addTab(TabSpec tabSpec) { 
	mTabCount++; 
	super.addTab(tabSpec); 
	} 
	
	@Override
	public void setCurrentTab(int index) { 
		// 切换前所在页的页面 
		int mCurrentTabID = getCurrentTab(); 
		if (null != getCurrentView()) { 
		// 第一次设置 Tab 时，该值为 null。 
		if (isOpenAnimation) { 
		// 离开的页面 
		// 循环时，末页到第一页(边界处理) 
		if (mCurrentTabID == (mTabCount - 1) && index == 0) { 
		getCurrentView().startAnimation(slideLeftOut); 
		} 
		// 循环时，首页到末页 
		else if (mCurrentTabID == 0 && index == (mTabCount - 1)) { 
		getCurrentView().startAnimation(slideRightOut); 
		} 
		// 切换到右边的界面，从左边离开 
		else if (index > mCurrentTabID) { 
		getCurrentView().startAnimation(slideLeftOut); 
		} 
		// 切换到左边的界面，从右边离开 
		else if (index < mCurrentTabID) { 
		getCurrentView().startAnimation(slideRightOut); 
		} 
		} 
		} 
		// 设置当前页 
		super.setCurrentTab(index); 
		  
		if (isOpenAnimation) { 
		// 当前页进来是动画 
		// 循环时，末页到第一页 
		if (mCurrentTabID == (mTabCount - 1) && index == 0) { 
		getCurrentView().startAnimation(slideRightIn); 
		} 
		// 循环时，首页到末页(边界处理) 
		else if (mCurrentTabID == 0 && index == (mTabCount - 1)) { 
		getCurrentView().startAnimation(slideLeftIn); 
		} 
		// 切换到右边的界面，从右边进来 
		else if (index > mCurrentTabID) { 
		getCurrentView().startAnimation(slideRightIn); 
		} 
		// 切换到左边的界面，从左边进来 
		else if (index < mCurrentTabID) { 
		getCurrentView().startAnimation(slideLeftIn); 
		} 
		}
	}
}
